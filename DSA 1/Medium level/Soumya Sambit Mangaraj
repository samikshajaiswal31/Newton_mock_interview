============== FINAL CALL :- YES ==============

Q1)   [1,1,2,2,3,1,3,1,2,3,2,1,2,3]
      [1,2,3]
--------------------------------------------------------------------------------------------
Q2)
Given an array of integers. Find the Inversion Count in the array.
Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted 
then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum.
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.

Example 1:

Input: N = 5, arr[] = {2, 4, 1, 3, 5}

Output: 3

Explanation: The sequence 2, 4, 1, 3, 5

has three inversions (2, 1), (4, 1), (4, 3).

Example 2:

Input: N = 5

arr[] = {2, 3, 4, 5, 6}

Output: 0

Explanation: As the sequence is already

sorted so there is no inversion count.

Example 3:

Input: N = 3, arr[] = {10, 10, 10}

Output: 0

Explanation: As all the elements of array

are same, so there is no inversion count.
import java.util.Scanner;
import java.util.Arrays;
class Main
{
    public static void main(String[] args) 
    {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int count = 0;
        int arr[] = new int[n];
        
        for(int i = 0 ; i < arr.length ; i++)      // Time comp:  O(n)
            arr[i] = in.nextInt();
            
        for(int i = 0 ; i < arr.length-1 ; i++)
        {
            for(int j = i+1 ; j < arr.length; j++)
            {
                if(arr[i] > arr[j])     // 2 < 4
                    count++;
                else
                    continue;
            }
        }
        System.out.println(count); 
    }
}
-------------------------------------------------------------------------------------------------

/* Merge two sorted arrays
   I/P: 1 2 3 4
        1 3 4 5
   O/P: 1 1 2 3 3 4 4 5
*/
import java.util.Arrays;
class HelloWorld 
{
    public static void main(String[] args) 
    {
        int arr1[] = {1,2,3,4};
        int arr2[] = {1,3,4,5};
        int n = arr1.length + arr2.length;     
        int newArr[] = new int[n];
        int idx = -1;
        
        for(int i = 0 ; i < arr1.length ; i++)      // Time comp:  O(n1) for first loop
            newArr[++idx] = arr1[i];
            
        for(int i = 0 ; i < arr2.length ; i++)      // Time comp:  O(n2) for second loop 
            newArr[++idx] = arr2[i];
            
        Arrays.sort(newArr);
        System.out.println(Arrays.toString(newArr));    // final Time comp:  O(n1+n2)
    }
}

/* Merge two sorted arrays using another approach
  arr1 = {1 2 3 4}       arr2 = {1 3 4 5}
  O/P : = {1 1 2 3 3 4 4 5}            */
  
import java.util.Arrays;
class Merged
{
    public static void main(String[] args) 
    {
        int arr1[] = {1,2,3,4};       // first array
        int arr2[] = {1,3,4,5,6,8};       // second array
        
        int n = arr1.length + arr2.length;  // n is length of final array
        int newArr[] = new int[n];          // final array name as newArr
        
        int i = 0, j = 0, k = 0;     // take i,j,k as incrementing the index of arr1, arr2, newArr.  
        
        while ( i < arr1.length && j < arr2.length )  // 0 < 4  &&  0 < 4
        {
            if ( arr1[i] < arr2[j] )                  // 1 < 1,
                newArr[k++] = arr1[i++];              
            else
                newArr[k++] = arr2[j++];     // newArr[0] = 1,  k = 1, j = 1
        }
       
        while (i < arr1.length)      // 4 < 4
            newArr[k++] = arr1[i++]; // storing the remaining elements of arr1 in newArr
        while (j < arr2.length)         //  4 < 6
            newArr[k++] = arr2[j++];    // storing the remaining elements of arr2 in newArr 
        System.out.println( Arrays.toString(newArr) );    
    }
}




